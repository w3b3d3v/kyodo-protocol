{
  "address": "0xD243266284806B27Dd7A2766298789602bf20F2a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kyodoTreasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_communityDAO",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_stableVaultAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "chainList",
          "type": "uint256[]"
        },
        {
          "internalType": "uint64[]",
          "name": "_chainSelectors",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "DestinationChainNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calculatedFees",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToWithdraw",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "company",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "professional",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agreementId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AgreementCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "new_admin",
          "type": "address"
        }
      ],
      "name": "NewAdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "profile",
          "type": "address"
        }
      ],
      "name": "NewProfileAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "company",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "professional",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agreementId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "removed_admin",
          "type": "address"
        }
      ],
      "name": "RemovedAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "TokensTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHANGE_PARAMETERS",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "StableVault",
      "outputs": [
        {
          "internalType": "contract IStableVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "acceptedPaymentTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "addAcceptedPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agreementSkills",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agreements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "enum IAgreementContract.AgreementStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "company",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "professional",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPaid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityDAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityDAOFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contractorAgreements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_professional",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAgreementContract.Skill[]",
          "name": "_skills",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_paymentAmount",
          "type": "uint256"
        }
      ],
      "name": "createAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "crossChainCCIPConfigs",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "denylistChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAcceptedPaymentTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getAgreementById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "enum IAgreementContract.AgreementStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "company",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "professional",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "paymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPaid",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAgreementContract.Agreement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAgreementCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAgreements",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "enum IAgreementContract.AgreementStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "company",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "professional",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "paymentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPaid",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAgreementContract.Agreement[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractor",
          "type": "address"
        }
      ],
      "name": "getContractorAgreementIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_professional",
          "type": "address"
        }
      ],
      "name": "getProfessionalAgreementIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_agreementId",
          "type": "uint256"
        }
      ],
      "name": "getSkillsByAgreementId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAgreementContract.Skill[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kyodoTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kyodoTreasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_agreementId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToPay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_paymentAddress",
          "type": "address"
        }
      ],
      "name": "makePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextAgreementId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removePaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        }
      ],
      "name": "setCrossChainConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_kyodoTreasuryFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_communityDAOFee",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "setPreferredChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_StableVaultAddress",
          "type": "address"
        }
      ],
      "name": "setStableVaultAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPreferredChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_destinationChainSelector",
          "type": "uint64"
        }
      ],
      "name": "whitelistChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "whitelistedChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb651d29e04f358c2a8f23045af118482686ae86a710aeca678d77c5913b6e6c7",
  "receipt": {
    "to": null,
    "from": "0x988d8063f521aa948FEc4AC1a4EDa72a5BdCBFb0",
    "contractAddress": "0xD243266284806B27Dd7A2766298789602bf20F2a",
    "transactionIndex": 0,
    "gasUsed": "5165258",
    "logsBloom": "0x
    "blockHash": "0x61894e082ac4cfc6b353f443a3a4dcfa520217a629c9f1183c55e0505d57facb",
    "transactionHash": "0xb651d29e04f358c2a8f23045af118482686ae86a710aeca678d77c5913b6e6c7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 28327003,
        "transactionHash": "0xb651d29e04f358c2a8f23045af118482686ae86a710aeca678d77c5913b6e6c7",
        "address": "0xD243266284806B27Dd7A2766298789602bf20F2a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000988d8063f521aa948fec4ac1a4eda72a5bdcbfb0",
          "0x000000000000000000000000988d8063f521aa948fec4ac1a4eda72a5bdcbfb0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x61894e082ac4cfc6b353f443a3a4dcfa520217a629c9f1183c55e0505d57facb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 28327003,
        "transactionHash": "0xb651d29e04f358c2a8f23045af118482686ae86a710aeca678d77c5913b6e6c7",
        "address": "0xD243266284806B27Dd7A2766298789602bf20F2a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x73fd536265c26e6e13263018bc9d82a9b962a7857ae70dac847fd743f5e71535",
          "0x000000000000000000000000988d8063f521aa948fec4ac1a4eda72a5bdcbfb0",
          "0x000000000000000000000000988d8063f521aa948fec4ac1a4eda72a5bdcbfb0"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x61894e082ac4cfc6b353f443a3a4dcfa520217a629c9f1183c55e0505d57facb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 28327003,
        "transactionHash": "0xb651d29e04f358c2a8f23045af118482686ae86a710aeca678d77c5913b6e6c7",
        "address": "0xD243266284806B27Dd7A2766298789602bf20F2a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000988d8063f521aa948fec4ac1a4eda72a5bdcbfb0"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x61894e082ac4cfc6b353f443a3a4dcfa520217a629c9f1183c55e0505d57facb"
      }
    ],
    "blockNumber": 28327003,
    "cumulativeGasUsed": "5165258",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x988d8063f521aa948FEc4AC1a4EDa72a5BdCBFb0",
    "0x89Bc14dC26dCd71713f583A0DD61f7470c7DE7d3",
    "0x988d8063f521aa948FEc4AC1a4EDa72a5BdCBFb0",
    "0x554472a2720e5e7d5d3c817529aba05eed5f82d8",
    "0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846",
    "14767482510784806043",
    "0xB903E186F6DFcF174750cBd616feAD6D5c9182e5",
    [
      "11155111",
      "420",
      "80001",
      "97",
      "84531",
      "43113",
      "31337"
    ],
    [
      "16015286601757825753",
      "2664363617261496610",
      "12532609583862916517",
      "13264668187771770619",
      "5790810961207155433",
      "14767482510784806043",
      "0"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "8755c16be98c246db66453b09b3a4a17",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kyodoTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_communityDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_stableVaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"chainList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_chainSelectors\",\"type\":\"uint64[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"DestinationChainNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"professional\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"new_admin\",\"type\":\"address\"}],\"name\":\"NewAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"profile\",\"type\":\"address\"}],\"name\":\"NewProfileAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"professional\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agreementId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removed_admin\",\"type\":\"address\"}],\"name\":\"RemovedAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHANGE_PARAMETERS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StableVault\",\"outputs\":[{\"internalType\":\"contract IStableVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedPaymentTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"addAcceptedPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agreementSkills\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agreements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum IAgreementContract.AgreementStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"professional\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityDAOFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractorAgreements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_professional\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"internalType\":\"struct IAgreementContract.Skill[]\",\"name\":\"_skills\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crossChainCCIPConfigs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"denylistChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAcceptedPaymentTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAgreementById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum IAgreementContract.AgreementStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"professional\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"}],\"internalType\":\"struct IAgreementContract.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAgreementCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAgreements\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum IAgreementContract.AgreementStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"professional\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaid\",\"type\":\"uint256\"}],\"internalType\":\"struct IAgreementContract.Agreement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractor\",\"type\":\"address\"}],\"name\":\"getContractorAgreementIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_professional\",\"type\":\"address\"}],\"name\":\"getProfessionalAgreementIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agreementId\",\"type\":\"uint256\"}],\"name\":\"getSkillsByAgreementId\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"internalType\":\"struct IAgreementContract.Skill[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyodoTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyodoTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agreementId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToPay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentAddress\",\"type\":\"address\"}],\"name\":\"makePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextAgreementId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"setCrossChainConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_kyodoTreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_communityDAOFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"setPreferredChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_StableVaultAddress\",\"type\":\"address\"}],\"name\":\"setStableVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPreferredChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"}],\"name\":\"whitelistChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"whitelistedChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addAcceptedPaymentToken(address)\":{\"params\":{\"_tokenAddress\":\"The address of the ERC20 token to be added.\"}},\"createAgreement(string,string,address,(string,uint256)[],uint256)\":{\"params\":{\"_description\":\"A brief description of the agreement.\",\"_paymentAmount\":\"The payment amount for the agreement.\",\"_professional\":\"The address of the professional involved in the agreement.\",\"_skills\":\"An array of skills required for the agreement.\",\"_title\":\"The title of the agreement.\"}},\"getAgreementById(uint256)\":{\"params\":{\"_id\":\"The ID of the agreement.\"},\"returns\":{\"_0\":\"Agreement The agreement associated with the given ID.\"}},\"getAgreementCount()\":{\"returns\":{\"_0\":\"uint256 The total number of agreements.\"}},\"getAllAgreements()\":{\"returns\":{\"_0\":\"Agreement[] An array of all agreements.\"}},\"getContractorAgreementIds(address)\":{\"params\":{\"_contractor\":\"The address of the contractor.\"},\"returns\":{\"_0\":\"uint256[] An array of agreement IDs.\"}},\"getProfessionalAgreementIds(address)\":{\"params\":{\"_professional\":\"The address of the professional.\"},\"returns\":{\"_0\":\"uint256[] An array of agreement IDs.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSkillsByAgreementId(uint256)\":{\"params\":{\"_agreementId\":\"The ID of the agreement.\"},\"returns\":{\"_0\":\"Skill[] An array of skills associated with the agreement.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"makePayment(uint256,uint256,address)\":{\"params\":{\"_agreementId\":\"The ID of the agreement for which the payment is being made.\",\"_amountToPay\":\"The amount of the payment.\",\"_paymentAddress\":\"The address of the token in which payment is made.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setFees(uint256,uint256,uint256)\":{\"params\":{\"_communityDAOFee\":\"The portion of the fee allocated to the Community DAO.\",\"_feePercentage\":\"The percentage of the transaction amount to be taken as a fee.\",\"_kyodoTreasuryFee\":\"The portion of the fee allocated to the Kyodo Treasury.\"}},\"setStableVaultAddress(address)\":{\"params\":{\"_StableVaultAddress\":\"The address of the StableVault contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAcceptedPaymentToken(address)\":{\"notice\":\"Adds an ERC20 token to the list of accepted payment tokens.\"},\"createAgreement(string,string,address,(string,uint256)[],uint256)\":{\"notice\":\"Creates a new agreement between a company and a professional.\"},\"getAgreementById(uint256)\":{\"notice\":\"Retrieves an agreement by its ID.\"},\"getAgreementCount()\":{\"notice\":\"Returns the total number of agreements created.\"},\"getAllAgreements()\":{\"notice\":\"Returns all agreements.\"},\"getContractorAgreementIds(address)\":{\"notice\":\"Returns a list of agreement IDs associated with a contractor.\"},\"getProfessionalAgreementIds(address)\":{\"notice\":\"Returns a list of agreement IDs associated with a professional.\"},\"getSkillsByAgreementId(uint256)\":{\"notice\":\"Retrieves the skills associated with a specific agreement ID.\"},\"makePayment(uint256,uint256,address)\":{\"notice\":\"Makes a payment for a specific agreement.\"},\"setFees(uint256,uint256,uint256)\":{\"notice\":\"Sets the fee structure for the agreement transactions.\"},\"setStableVaultAddress(address)\":{\"notice\":\"Sets the address of the StableVault contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AgreementContract.sol\":\"AgreementContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns guaranteed execution fee for the specified message\\n  /// delivery to destination chain\\n  /// @dev returns 0 fee on invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9899fab6a40f68408ddf153612c553f2441ea27770176bf71ccce22c40393286\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit and strict = false.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // extraArgs will evolve to support new features\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit; // ATTENTION!!! MAX GAS LIMIT 4M FOR BETA TESTING\\n    bool strict; // See strict sequencing details below.\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x2fb8e11d517fa5ee213aaab3f4d416155cd2b72d61ba443dbeff6b41d29e9523\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract Admin is AccessControl, Pausable {\\n    event NewAdminAdded(address indexed new_admin);\\n    event RemovedAdmin(address indexed removed_admin);\\n    event NewProfileAdded(address indexed profile);\\n\\n    bytes32 public constant CHANGE_PARAMETERS = keccak256(\\\"CHANGE_PARAMETERS\\\");\\n\\n    constructor(address admin) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(CHANGE_PARAMETERS, admin);\\n    }\\n\\n    function addAdmin(address account) external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused() {\\n        _grantRole(DEFAULT_ADMIN_ROLE, account);\\n        emit NewAdminAdded(account);\\n    } \\n\\n    function removeAdmin(address account) external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused() {\\n    \\t_revokeRole(DEFAULT_ADMIN_ROLE, account);\\n        emit RemovedAdmin(account);\\n    }\\n\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused() {\\n        _pause();\\n    }\\n    \\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) whenPaused() {\\n        _unpause();\\n    }\\n\\n    function addProfile(address account) external whenNotPaused() {\\n        _grantRole(CHANGE_PARAMETERS, account);\\n        emit NewProfileAdded(account);\\n    }\\n}\",\"keccak256\":\"0xb440bb97b766575de7cceb1ab99645b99e70848a7bfbfffc290aa95781946f31\",\"license\":\"MIT\"},\"contracts/AgreementContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport \\\"./chainlink/CCIPSender.sol\\\";\\nimport \\\"./interfaces/IStableVault.sol\\\";\\nimport \\\"./interfaces/IAgreementContract.sol\\\";\\nimport \\\"./Admin.sol\\\";\\nimport \\\"./chainlink/CCIPSender.sol\\\";\\n\\ncontract AgreementContract is Admin, IAgreementContract, CCIPSender {\\n    uint256 public nextAgreementId = 1;\\n    Agreement[] public agreements;\\n    // CrossChain Temporary Configs\\n    mapping(uint256 => CrossChainCCIP) public crossChainCCIPConfigs;\\n    mapping(address => uint256) public userPreferredChain;\\n    mapping(address => uint256[]) public contractorAgreements; // Mapping from user address to agreement IDs\\n    mapping(address => uint256[]) professionalAgreements;\\n    mapping(address => bool) public acceptedPaymentTokens; // Mapping of accepted payment tokens\\n    mapping(uint => Skill[]) public agreementSkills;\\n    address[] public tokenAddresses;\\n\\n    IStableVault public StableVault;\\n    address public kyodoTreasury;\\n    address public communityDAO;\\n\\n    uint256 public feePercentage; // Fee percentage in basis points (1 basis point = 0.01%)\\n    uint256 public kyodoTreasuryFee;\\n    uint256 public communityDAOFee;\\n\\n    constructor(\\n        address _kyodoTreasury,\\n        address _communityDAO,\\n        address admin,\\n        address _router,\\n        address _link,\\n        uint64 chainSelector,\\n        address _stableVaultAddress,\\n        uint256[] memory chainList,\\n        uint64[] memory _chainSelectors\\n    ) Admin(admin) CCIPSender(chainSelector, _router, _link, admin) {\\n        require(\\n            chainList.length == _chainSelectors.length,\\n            \\\"Chainlist and ChainSelectors length should be the same size.\\\"\\n        );\\n        StableVault = IStableVault(_stableVaultAddress);\\n\\n        kyodoTreasury = _kyodoTreasury;\\n        communityDAO = _communityDAO;\\n\\n        for (uint i = 0; i < chainList.length; i++) {\\n            crossChainCCIPConfigs[chainList[i]].chainSelector = _chainSelectors[i];\\n        }\\n    }\\n\\n    function addAcceptedPaymentToken(\\n        address _tokenAddress\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        acceptedPaymentTokens[_tokenAddress] = true;\\n        tokenAddresses.push(_tokenAddress);\\n    }\\n\\n    function removePaymentToken(\\n        address token\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        acceptedPaymentTokens[token] = false;\\n    }\\n\\n    function getAcceptedPaymentTokens() public view returns (address) {\\n        return tokenAddresses[0];\\n    }\\n\\n    function createAgreement(\\n        string memory _title,\\n        string memory _description,\\n        address _professional,\\n        Skill[] memory _skills,\\n        uint256 _paymentAmount\\n    ) external override {\\n        require(\\n            _professional != address(0),\\n            \\\"Professional address cannot be zero\\\"\\n        );\\n        require(_skills.length > 0, \\\"Skills must not be empty\\\");\\n        require(_paymentAmount > 0, \\\"Payment amount must be greater than zero\\\");\\n        require(\\n            _professional != msg.sender,\\n            \\\"Professional address cannot be the same as company\\\"\\n        );\\n\\n        uint256 totalSkillLevel = 0;\\n        for (uint256 i = 0; i < _skills.length; i++) {\\n            totalSkillLevel += _skills[i].level;\\n        }\\n\\n        require(totalSkillLevel <= 100, \\\"Total skill level cannot exceed 100\\\");\\n\\n        Agreement memory newAgreement = Agreement({\\n            id: nextAgreementId,\\n            title: _title,\\n            description: _description,\\n            status: AgreementStatus.Active,\\n            company: msg.sender,\\n            professional: _professional,\\n            paymentAmount: _paymentAmount,\\n            totalPaid: 0\\n        });\\n\\n        for (uint256 i = 0; i < _skills.length; i++) {\\n            agreementSkills[nextAgreementId].push(\\n                Skill({name: _skills[i].name, level: _skills[i].level})\\n            );\\n        }\\n\\n        agreements.push(newAgreement);\\n        contractorAgreements[msg.sender].push(nextAgreementId);\\n        professionalAgreements[_professional].push(nextAgreementId);\\n        emit AgreementCreated(\\n            msg.sender,\\n            _professional,\\n            nextAgreementId,\\n            _paymentAmount\\n        );\\n        nextAgreementId++;\\n    }\\n\\n    function getAgreementCount() external view override returns (uint256) {\\n        return agreements.length;\\n    }\\n\\n    function getAllAgreements()\\n        external\\n        view\\n        override\\n        returns (Agreement[] memory)\\n    {\\n        return agreements;\\n    }\\n\\n    function getContractorAgreementIds(\\n        address _contractor\\n    ) external view override returns (uint256[] memory) {\\n        return contractorAgreements[_contractor];\\n    }\\n\\n    function getProfessionalAgreementIds(\\n        address _professional\\n    ) external view override returns (uint256[] memory) {\\n        return professionalAgreements[_professional];\\n    }\\n\\n    function getAgreementById(\\n        uint256 _id\\n    ) external view override returns (Agreement memory) {\\n        require(_id > 0 && _id <= agreements.length, \\\"Invalid agreement ID\\\");\\n        return agreements[_id - 1];\\n    }\\n\\n    function getSkillsByAgreementId(\\n        uint256 _agreementId\\n    ) external view override returns (Skill[] memory) {\\n        return agreementSkills[_agreementId];\\n    }\\n\\n    function makePayment(\\n        uint256 _agreementId,\\n        uint256 _amountToPay,\\n        address _paymentAddress\\n    ) external {\\n        require(\\n            _agreementId > 0 && _agreementId <= agreements.length,\\n            \\\"Invalid agreement ID\\\"\\n        );\\n        require(\\n            acceptedPaymentTokens[_paymentAddress],\\n            \\\"Invalid payment token\\\"\\n        );\\n        Agreement storage agreement = agreements[_agreementId - 1];\\n\\n        uint256 totalFeeBasisPoints;\\n        uint256 totalFee;\\n        uint256 kyodoTreasuryShare;\\n        uint256 communityDAOShare;\\n        uint256 professionalPayment;\\n\\n        IERC20 token = IERC20(_paymentAddress);\\n\\n        unchecked {\\n            totalFeeBasisPoints = feePercentage * 1000;\\n            totalFee = (totalFeeBasisPoints * _amountToPay) / (10 ** 6);\\n            kyodoTreasuryShare = (totalFee * kyodoTreasuryFee) / 1000;\\n            communityDAOShare = totalFee - kyodoTreasuryShare;\\n            professionalPayment = _amountToPay - totalFee;\\n        }\\n\\n        require(\\n            token.transferFrom(msg.sender, address(this), _amountToPay),\\n            \\\"User must approve the amount of the agreement\\\"\\n        );\\n\\n        token.approve(address(StableVault), _amountToPay);\\n        StableVault.deposit(kyodoTreasuryShare, address(token), kyodoTreasury);\\n        StableVault.deposit(communityDAOShare, address(token), communityDAO);\\n\\n        uint256 userPreferredChain_ = userPreferredChain[agreement.professional];\\n        if (userPreferredChain_ == 0) {\\n            userPreferredChain_ = getChainID();\\n        }\\n\\n        if (userPreferredChain_ == getChainID()) {\\n            StableVault.deposit(\\n                professionalPayment,\\n                address(token),\\n                agreement.professional\\n            );\\n        } else {\\n            uint64 _chainSelector = crossChainCCIPConfigs[userPreferredChain_].chainSelector;\\n            address _stableVault = crossChainCCIPConfigs[userPreferredChain_].vaultAddress;\\n            transferTokens(_chainSelector, _stableVault, agreement.professional, _paymentAddress, professionalPayment);         \\n        }\\n\\n        unchecked {\\n            agreement.totalPaid += _amountToPay;\\n        }\\n\\n        emit PaymentMade(\\n            msg.sender,\\n            agreement.professional,\\n            _agreementId,\\n            _amountToPay\\n        );\\n    }\\n\\n    function setFees(\\n        uint256 _feePercentage,\\n        uint256 _kyodoTreasuryFee,\\n        uint256 _communityDAOFee\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            _feePercentage >= 0 && _feePercentage <= 1000,\\n            \\\"Invalid fee percentage\\\"\\n        );\\n\\n        feePercentage = _feePercentage;\\n        kyodoTreasuryFee = _kyodoTreasuryFee;\\n        communityDAOFee = _communityDAOFee;\\n    }\\n\\n    function setStableVaultAddress(\\n        address _StableVaultAddress\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        StableVault = IStableVault(_StableVaultAddress);\\n    }\\n\\n    function setCrossChainConfigs(\\n        uint256 chainId,\\n        uint64 chainSelector,\\n        address vaultAddress\\n    ) external onlyOwner {\\n        crossChainCCIPConfigs[chainId].chainSelector = chainSelector;\\n        crossChainCCIPConfigs[chainId].vaultAddress = vaultAddress;\\n    }\\n\\n    function getChainID() public view returns (uint256) {\\n        uint256 chainID;\\n        assembly {\\n            chainID := chainid()\\n        }\\n        return chainID;\\n    }\\n\\n    function setPreferredChain(uint256 chainId) external {\\n        userPreferredChain[msg.sender] = chainId;\\n    }\\n}\\n\",\"keccak256\":\"0xb2571b0952bec3a4a02bb0bc5a56bf2c0f27c324dbe43df609041cae4eb905f9\",\"license\":\"MIT\"},\"contracts/chainlink/CCIPSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\n\\ncontract CCIPSender is Ownable {\\n    IRouterClient router;\\n    IERC20 linkToken;\\n    uint64 chainSelector;\\n\\n    mapping(uint64 => bool) public whitelistedChains;\\n\\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\\n    error DestinationChainNotWhitelisted(uint64 destinationChainSelector);\\n    error NothingToWithdraw();\\n\\n    event TokensTransferred(\\n        bytes32 indexed messageId, // The unique ID of the message.\\n        uint64 indexed destinationChainSelector, // The chain selector of the destination chain.\\n        address receiver, // The address of the receiver on the destination chain.\\n        address token, // The token address that was transferred.\\n        uint256 tokenAmount, // The token amount that was transferred.\\n        address feeToken, // the token address used to pay CCIP fees.\\n        uint256 fees // The fees paid for sending the message.\\n    );\\n\\n    modifier onlyWhitelistedChain(uint64 _destinationChainSelector) {\\n        if (!whitelistedChains[_destinationChainSelector])\\n            revert DestinationChainNotWhitelisted(_destinationChainSelector);\\n        _;\\n    }\\n\\n    constructor(\\n        uint64 _chainSelector,\\n        address _router,\\n        address _link,\\n        address initialOwner\\n    ) Ownable(initialOwner) {\\n        router = IRouterClient(_router);\\n        linkToken = IERC20(_link);\\n        chainSelector = _chainSelector;\\n    }\\n\\n    function whitelistChain(uint64 _destinationChainSelector)\\n        external\\n        onlyOwner\\n    {\\n        whitelistedChains[_destinationChainSelector] = true;\\n    }\\n\\n    function denylistChain(uint64 _destinationChainSelector)\\n        external\\n        onlyOwner\\n    {\\n        whitelistedChains[_destinationChainSelector] = false;\\n    }\\n\\n    function transferTokens(\\n        uint64 _destinationChainSelector,\\n        address _receiver,\\n        address _depositAddress,\\n        address _token,\\n        uint256 _amount\\n    )\\n        internal\\n        onlyWhitelistedChain(_destinationChainSelector)\\n        returns (bytes32 messageId)\\n    {\\n        Client.EVMTokenAmount[]\\n            memory tokenAmounts = new Client.EVMTokenAmount[](1);\\n        Client.EVMTokenAmount memory tokenAmount = Client.EVMTokenAmount({\\n            token: _token,\\n            amount: _amount\\n        });\\n        tokenAmounts[0] = tokenAmount;\\n\\n        // Build the CCIP Message\\n        Client.EVM2AnyMessage memory message = Client.EVM2AnyMessage({\\n            receiver: abi.encode(_receiver),\\n            data: abi.encode(_depositAddress),\\n            tokenAmounts: tokenAmounts,\\n            extraArgs: Client._argsToBytes(\\n                Client.EVMExtraArgsV1({gasLimit: 900_000, strict: false})\\n            ),\\n            feeToken: address(linkToken)\\n        });\\n\\n        // CCIP Fees Management\\n        uint256 fees = router.getFee(_destinationChainSelector, message);\\n\\n        if (fees > linkToken.balanceOf(address(this)))\\n            revert NotEnoughBalance(linkToken.balanceOf(address(this)), fees);\\n\\n        linkToken.approve(address(router), fees);\\n\\n        // Approve Router to spend CCIP-BnM tokens we send\\n        IERC20(_token).approve(address(router), _amount);\\n\\n        // Send CCIP Message\\n        messageId = router.ccipSend(_destinationChainSelector, message);\\n\\n        emit TokensTransferred(\\n            messageId,\\n            _destinationChainSelector,\\n            _receiver,\\n            _token,\\n            _amount,\\n            address(linkToken),\\n            fees\\n        );\\n    }\\n\\n    function withdrawToken(address _beneficiary, address _token)\\n        public\\n        onlyOwner\\n    {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n\\n        if (amount == 0) revert NothingToWithdraw();\\n\\n        IERC20(_token).transfer(_beneficiary, amount);\\n    }\\n}\",\"keccak256\":\"0xd02268d9de3b980b753ca06d94c196f3b0267df19de2941b12b2f80ef02d3599\",\"license\":\"MIT\"},\"contracts/interfaces/IAgreementContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IAgreementContract {\\n\\n    // Structs\\n    struct Token {\\n        uint256 amount;\\n        address tokenAddress;\\n    }\\n\\n    struct Skill {\\n        string name;\\n        uint256 level;\\n    }\\n\\n    struct Agreement {\\n        uint256 id;\\n        string title;\\n        string description;\\n        AgreementStatus status;\\n        address company;\\n        address professional;\\n        uint256 paymentAmount;\\n        uint256 totalPaid;\\n    }\\n\\n    struct CrossChainCCIP {\\n        uint64 chainSelector;\\n        address vaultAddress;\\n    }\\n\\n    // Enums\\n    enum AgreementStatus { Active, Completed }\\n\\n    // Events\\n    event AgreementCreated(address indexed company, address indexed professional, uint256 agreementId, uint256 amount);\\n    event PaymentMade(address indexed company, address indexed professional, uint256 agreementId, uint256 amount);\\n\\n    // Functions\\n    /**\\n     * @notice Adds an ERC20 token to the list of accepted payment tokens.\\n     * @param _tokenAddress The address of the ERC20 token to be added.\\n     */\\n    function addAcceptedPaymentToken(address _tokenAddress) external;\\n\\n    /**\\n     * @notice Creates a new agreement between a company and a professional.\\n     * @param _title The title of the agreement.\\n     * @param _description A brief description of the agreement.\\n     * @param _professional The address of the professional involved in the agreement.\\n     * @param _skills An array of skills required for the agreement.\\n     * @param _paymentAmount The payment amount for the agreement.\\n     */\\n    function createAgreement(string memory _title, string memory _description, address _professional, Skill[] memory _skills, uint256 _paymentAmount) external;\\n\\n    /**\\n     * @notice Returns the total number of agreements created.\\n     * @return uint256 The total number of agreements.\\n     */\\n    function getAgreementCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns all agreements.\\n     * @return Agreement[] An array of all agreements.\\n     */\\n    function getAllAgreements() external view returns (Agreement[] memory);\\n\\n    /**\\n     * @notice Returns a list of agreement IDs associated with a contractor.\\n     * @param _contractor The address of the contractor.\\n     * @return uint256[] An array of agreement IDs.\\n     */\\n    function getContractorAgreementIds(address _contractor) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Returns a list of agreement IDs associated with a professional.\\n     * @param _professional The address of the professional.\\n     * @return uint256[] An array of agreement IDs.\\n     */\\n    function getProfessionalAgreementIds(address _professional) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves an agreement by its ID.\\n     * @param _id The ID of the agreement.\\n     * @return Agreement The agreement associated with the given ID.\\n     */\\n    function getAgreementById(uint256 _id) external view returns (Agreement memory);\\n\\n    /**\\n     * @notice Retrieves the skills associated with a specific agreement ID.\\n     * @param _agreementId The ID of the agreement.\\n     * @return Skill[] An array of skills associated with the agreement.\\n     */\\n    function getSkillsByAgreementId(uint256 _agreementId) external view returns (Skill[] memory);\\n\\n    /**\\n     * @notice Makes a payment for a specific agreement.\\n     * @param _agreementId The ID of the agreement for which the payment is being made.\\n     * @param _amountToPay The amount of the payment.\\n     * @param _paymentAddress The address of the token in which payment is made.\\n     */\\n    function makePayment(uint256 _agreementId, uint256 _amountToPay, address _paymentAddress) external;\\n\\n    /**\\n     * @notice Sets the fee structure for the agreement transactions.\\n     * @param _feePercentage The percentage of the transaction amount to be taken as a fee.\\n     * @param _kyodoTreasuryFee The portion of the fee allocated to the Kyodo Treasury.\\n     * @param _communityDAOFee The portion of the fee allocated to the Community DAO.\\n     */\\n    function setFees(uint256 _feePercentage, uint256 _kyodoTreasuryFee, uint256 _communityDAOFee) external;\\n\\n    /**\\n     * @notice Sets the address of the StableVault contract.\\n     * @param _StableVaultAddress The address of the StableVault contract.\\n     */\\n    function setStableVaultAddress(address _StableVaultAddress) external;\\n}\",\"keccak256\":\"0xf1c07c9bf221b35f3f007fbe98ac83548e892f8376339237e7975a18aac634f7\",\"license\":\"MIT\"},\"contracts/interfaces/IStableVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\ninterface IStableVault {\\n\\n    /// @notice Emitted when the vault's balance is updated.\\n    /// @param _vaultBalance The new balance of the vault.\\n    event BalanceUpdated(uint256 _vaultBalance);\\n\\n    /// @notice Emitted when a user withdraws assets from the vault.\\n    /// @param user The address of the user who made the withdrawal.\\n    /// @param amount The amount of the asset withdrawn.\\n    /// @param asset The address of the asset that was withdrawn.\\n    event Withdrawal(address indexed user, uint256 amount, address indexed asset);\\n\\n    /// @notice Emitted when a deposit is made to the Aave Lending Pool.\\n    /// @param user The user who made the deposit.\\n    /// @param asset The address of the asset deposited.\\n    /// @param amount The amount of the asset deposited.\\n    event DepositAave(address indexed user, address asset, uint256 amount);\\n\\n    /// @notice Deposits an asset into the Vault and mints vault tokens for the beneficiary.\\n    /// @param amount The amount of the asset to deposit.\\n    /// @param _asset The address of the asset token being deposited.\\n    /// @param _beneficiary The address that will receive the minted vault tokens.\\n    /// @return bool Indicates if the deposit was successful.\\n    function deposit(uint256 amount, address _asset, address _beneficiary) external returns(bool);\\n\\n    /// @notice Withdraws an asset from the Vault and burns the corresponding vault tokens.\\n    /// @param amount The amount of the asset to withdraw.\\n    /// @param _asset The address of the asset token being withdrawn.\\n    /// @return bool Indicates if the withdrawal was successful.\\n    function withdraw(uint256 amount, address _asset) external returns(bool);\\n\\n    /// @notice Sets the addresses for the Aave ecosystem components.\\n    /// @param _AAVE_DATA_PROVIDER Address of the Aave Data Provider.\\n    /// @param _AAVE_INCENTIVES_CONTROLLER Address of the Aave Incentives Controller.\\n    /// @param _AAVE_LENDING_POOL Address of the Aave Lending Pool.\\n    function setAaveSettings(address _AAVE_DATA_PROVIDER, address _AAVE_INCENTIVES_CONTROLLER, address _AAVE_LENDING_POOL) external;\\n\\n    /// @notice Sets the user's preference for automatic compounding in the Aave Lending Pool.\\n    /// @param useCompound Boolean indicating whether to use compounding or not.\\n    /// @param wallet The address of the user's wallet.\\n    function setUserCompoundPreference(bool useCompound, address wallet) external;\\n\\n    /// @notice Retrieves the current chain ID.\\n    /// @return uint256 The current chain ID.\\n    function getChainID() external view returns (uint256);\\n\\n    /// @notice Checks if a given function is valid for the current network.\\n    /// @param functionName The name of the function to check.\\n    /// @return bool Indicates if the network is valid for the given function.\\n    function isValidNetworkForFunction(string memory functionName) external view returns (bool);\\n\\n    /// @notice Updates the valid networks for a specific function.\\n    /// @param functionName The function name to update.\\n    /// @param chainIDs An array of chain IDs that are valid for the function.\\n    function updateValidNetworks(string memory functionName, uint256[] memory chainIDs) external;\\n\\n    /// @notice Returns the current balance of the vault.\\n    /// @return uint256 The current vault balance.\\n    function vaultBalance() external view returns(uint256);\\n\\n    /// @notice Retrieves the balance of Aave tokens for a given asset.\\n    /// @param _asset The address of the asset token.\\n    /// @return uint The balance of Aave tokens for the specified asset.\\n    function getAaveBalance(address _asset) external view returns(uint);\\n}\\n\",\"keccak256\":\"0x2b34298aa8df83ef394c02a682ef2df2f800e33ec4760a6f9ff216a16f11aa7c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f05760003560e01c80638207546e1161019d578063c391d858116100e9578063d547741f116100a2578063f2fde38b1161007c578063f2fde38b1461090d578063f38d215d14610929578063fc3f5dff14610959578063feb6b0cc14610975576102f0565b8063d547741f146108a3578063e5df8b84146108bf578063f2d64a96146108ef576102f0565b8063c391d858146107e3578063c9b99dab14610813578063c9e9290514610831578063ce6d88e51461084f578063cec10c111461086b578063d345ac7d14610887576102f0565b8063a001ecdd11610156578063a512542111610130578063a512542114610744578063a861367614610760578063b3f8cb001461077c578063bd14de96146107ac576102f0565b8063a001ecdd146106ec578063a06ee2db1461070a578063a217fddf14610726576102f0565b80638207546e146106285780638456cb59146106465780638da5cb5b146106505780638ee0344f1461066e57806391d148541461069e578063964bb4ab146106ce576102f0565b8063484bb2441161025c5780635c975abb11610215578063715018a6116101ef578063715018a6146105b2578063763574f6146105bc57806377be3d2f146105ec5780637d2399071461060a576102f0565b80635c975abb1461055c5780636334cb511461057a5780637048027514610596576102f0565b8063484bb244146104725780634e6873c7146104a25780634e92fafd146104c05780634f7cd72f146104f0578063564b81ef1461050e578063573fb6241461052c576102f0565b806329db7493116102ae57806329db7493146103c75780632f2ff15d146103f857806334625dcc1461041457806336568abe146104305780633aeac4e11461044c5780633f4ba83a14610468576102f0565b80628bed3e146102f557806301ffc9a71461031357806310143a641461034357806313cda3b71461035f5780631785f53c1461037b578063248a9ca314610397575b600080fd5b6102fd6109a6565b60405161030a919061389b565b60405180910390f35b61032d60048036038101906103289190613922565b6109b3565b60405161033a919061396a565b60405180910390f35b61035d600480360381019061035891906139e3565b610a2d565b005b610379600480360381019061037491906139e3565b610aa6565b005b610395600480360381019061039091906139e3565b610b72565b005b6103b160048036038101906103ac9190613a46565b610bdc565b6040516103be9190613a82565b60405180910390f35b6103e160048036038101906103dc9190613ac9565b610bfb565b6040516103ef929190613b99565b60405180910390f35b610412600480360381019061040d9190613bc9565b610cc4565b005b61042e60048036038101906104299190613c49565b610ce6565b005b61044a60048036038101906104459190613bc9565b610d31565b005b61046660048036038101906104619190613c76565b610dac565b005b610470610ef0565b005b61048c600480360381019061048791906139e3565b610f10565b604051610499919061396a565b60405180910390f35b6104aa610f30565b6040516104b79190613f0e565b60405180910390f35b6104da60048036038101906104d591906139e3565b6111b9565b6040516104e79190613fdf565b60405180910390f35b6104f8611250565b6040516105059190613a82565b60405180910390f35b610516611274565b604051610523919061389b565b60405180910390f35b61054660048036038101906105419190614001565b611281565b60405161055391906140e5565b60405180910390f35b610564611547565b604051610571919061396a565b60405180910390f35b610594600480360381019061058f9190614001565b61155e565b005b6105b060048036038101906105ab91906139e3565b6115a5565b005b6105ba61160f565b005b6105d660048036038101906105d19190613c49565b611623565b6040516105e3919061396a565b60405180910390f35b6105f4611643565b6040516106019190614116565b60405180910390f35b61061261168a565b60405161061f919061389b565b60405180910390f35b610630611690565b60405161063d9190614116565b60405180910390f35b61064e6116b6565b005b6106586116d6565b6040516106659190614116565b60405180910390f35b610688600480360381019061068391906139e3565b6116fe565b6040516106959190613fdf565b60405180910390f35b6106b860048036038101906106b39190613bc9565b611795565b6040516106c5919061396a565b60405180910390f35b6106d66117ff565b6040516106e39190614116565b60405180910390f35b6106f4611825565b604051610701919061389b565b60405180910390f35b610724600480360381019061071f91906139e3565b61182b565b005b61072e61187d565b60405161073b9190613a82565b60405180910390f35b61075e600480360381019061075991906139e3565b611884565b005b61077a600480360381019061077591906143c2565b6118ed565b005b61079660048036038101906107919190614001565b611eb7565b6040516107a39190614590565b60405180910390f35b6107c660048036038101906107c19190614001565b611fc5565b6040516107da9897969594939291906145c1565b60405180910390f35b6107fd60048036038101906107f891906139e3565b61217a565b60405161080a919061389b565b60405180910390f35b61081b612192565b604051610828919061389b565b60405180910390f35b610839612198565b604051610846919061389b565b60405180910390f35b6108696004803603810190610864919061464d565b61219e565b005b610885600480360381019061088091906146a0565b61223d565b005b6108a1600480360381019061089c9190613c49565b6122b7565b005b6108bd60048036038101906108b89190613bc9565b612302565b005b6108d960048036038101906108d49190614001565b612324565b6040516108e69190614116565b60405180910390f35b6108f7612363565b6040516109049190614752565b60405180910390f35b610927600480360381019061092291906139e3565b612389565b005b610943600480360381019061093e919061476d565b61240f565b604051610950919061389b565b60405180910390f35b610973600480360381019061096e91906147ad565b612440565b005b61098f600480360381019061098a9190614001565b612b2a565b60405161099d92919061480f565b60405180910390f35b6000600680549050905090565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a265750610a2582612b82565b5b9050919050565b610a35612bec565b610a5f7f73fd536265c26e6e13263018bc9d82a9b962a7857ae70dac847fd743f5e7153582612c2d565b508073ffffffffffffffffffffffffffffffffffffffff167f92364d7c14d8a26a040c77305dd885fcd5898051d1b1ead4189b09d5f091159060405160405180910390a250565b6000801b610ab381612d1e565b6001600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600d829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000801b610b7f81612d1e565b610b87612bec565b610b946000801b83612d32565b508173ffffffffffffffffffffffffffffffffffffffff167f3137a7fedbfedb7895dfa5a6812a4566dae9ded68d00aeec13c6ed1fa84a1c8060405160405180910390a25050565b6000806000838152602001908152602001600020600101549050919050565b600c6020528160005260406000208181548110610c1757600080fd5b906000526020600020906002020160009150915050806000018054610c3b90614867565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6790614867565b8015610cb45780601f10610c8957610100808354040283529160200191610cb4565b820191906000526020600020905b815481529060010190602001808311610c9757829003601f168201915b5050505050908060010154905082565b610ccd82610bdc565b610cd681612d1e565b610ce08383612c2d565b50505050565b610cee612e24565b6000600460008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610d39612eab565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d9d576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610da78282612d32565b505050565b610db4612e24565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610def9190614116565b602060405180830381865afa158015610e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3091906148ad565b905060008103610e6c576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b8152600401610ea79291906148da565b6020604051808303816000875af1158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea919061492f565b50505050565b6000801b610efd81612d1e565b610f05612eb3565b610f0d612ef3565b50565b600b6020528060005260406000206000915054906101000a900460ff1681565b60606006805480602002602001604051908101604052809291908181526020016000905b828210156111b057838290600052602060002090600702016040518061010001604052908160008201548152602001600182018054610f9290614867565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbe90614867565b801561100b5780601f10610fe05761010080835404028352916020019161100b565b820191906000526020600020905b815481529060010190602001808311610fee57829003601f168201915b5050505050815260200160028201805461102490614867565b80601f016020809104026020016040519081016040528092919081815260200182805461105090614867565b801561109d5780601f106110725761010080835404028352916020019161109d565b820191906000526020600020905b81548152906001019060200180831161108057829003601f168201915b505050505081526020016003820160009054906101000a900460ff1660018111156110cb576110ca613d3b565b5b60018111156110dd576110dc613d3b565b5b81526020016003820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820154815260200160068201548152505081526020019060010190610f54565b50505050905090565b6060600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561124457602002820191906000526020600020905b815481526020019060010190808311611230575b50505050509050919050565b7f73fd536265c26e6e13263018bc9d82a9b962a7857ae70dac847fd743f5e7153581565b6000804690508091505090565b6112896137cf565b60008211801561129e57506006805490508211155b6112dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d4906149a8565b60405180910390fd5b60066001836112ec91906149f7565b815481106112fd576112fc614a2b565b5b9060005260206000209060070201604051806101000160405290816000820154815260200160018201805461133190614867565b80601f016020809104026020016040519081016040528092919081815260200182805461135d90614867565b80156113aa5780601f1061137f576101008083540402835291602001916113aa565b820191906000526020600020905b81548152906001019060200180831161138d57829003601f168201915b505050505081526020016002820180546113c390614867565b80601f01602080910402602001604051908101604052809291908181526020018280546113ef90614867565b801561143c5780601f106114115761010080835404028352916020019161143c565b820191906000526020600020905b81548152906001019060200180831161141f57829003601f168201915b505050505081526020016003820160009054906101000a900460ff16600181111561146a57611469613d3b565b5b600181111561147c5761147b613d3b565b5b81526020016003820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820154815250509050919050565b6000600160009054906101000a900460ff16905090565b80600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000801b6115b281612d1e565b6115ba612bec565b6115c76000801b83612c2d565b508173ffffffffffffffffffffffffffffffffffffffff167f2dbe9fb88463d989acccabbb6ee06901f83672eb78e04a11ff48dd8f69a27cda60405160405180910390a25050565b611617612e24565b6116216000612f56565b565b60046020528060005260406000206000915054906101000a900460ff1681565b6000600d60008154811061165a57611659614a2b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60125481565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b6116c381612d1e565b6116cb612bec565b6116d3613019565b50565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561178957602002820191906000526020600020905b815481526020019060010190808311611775575b50505050509050919050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60115481565b6000801b61183881612d1e565b81600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000801b81565b6000801b61189181612d1e565b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361195c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195390614acc565b60405180910390fd5b60008251116119a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199790614b38565b60405180910390fd5b600081116119e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119da90614bca565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4890614c5c565b60405180910390fd5b6000805b8351811015611a9757838181518110611a7157611a70614a2b565b5b60200260200101516020015182611a889190614c7c565b91508080600101915050611a55565b506064811115611adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad390614d22565b60405180910390fd5b6000604051806101000160405280600554815260200188815260200187815260200160006001811115611b1257611b11613d3b565b5b81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020016000815250905060005b8451811015611c2657600c600060055481526020019081526020016000206040518060400160405280878481518110611b9b57611b9a614a2b565b5b6020026020010151600001518152602001878481518110611bbf57611bbe614a2b565b5b60200260200101516020015181525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081611c0c9190614ee4565b506020820151816001015550508080600101915050611b5f565b506006819080600181540180825580915050600190039060005260206000209060070201600090919091909150600082015181600001556020820151816001019081611c729190614ee4565b506040820151816002019081611c889190614ee4565b5060608201518160030160006101000a81548160ff02191690836001811115611cb457611cb3613d3b565b5b021790555060808201518160030160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816005015560e082015181600601555050600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005549080600181540180825580915050600190039060005260206000200160009091909190915055600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060055490806001815401808255809150506001900390600052602060002001600090919091909150558473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4969d8f058da37f5b596425a39904e9a027ac23d1865d6efd5df5a5e24eef7de60055486604051611e8e929190614fb6565b60405180910390a360056000815480929190611ea990614fdf565b919050555050505050505050565b6060600c6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611fba5783829060005260206000209060020201604051806040016040529081600082018054611f1f90614867565b80601f0160208091040260200160405190810160405280929190818152602001828054611f4b90614867565b8015611f985780601f10611f6d57610100808354040283529160200191611f98565b820191906000526020600020905b815481529060010190602001808311611f7b57829003601f168201915b5050505050815260200160018201548152505081526020019060010190611eec565b505050509050919050565b60068181548110611fd557600080fd5b9060005260206000209060070201600091509050806000015490806001018054611ffe90614867565b80601f016020809104026020016040519081016040528092919081815260200182805461202a90614867565b80156120775780601f1061204c57610100808354040283529160200191612077565b820191906000526020600020905b81548152906001019060200180831161205a57829003601f168201915b50505050509080600201805461208c90614867565b80601f01602080910402602001604051908101604052809291908181526020018280546120b890614867565b80156121055780601f106120da57610100808354040283529160200191612105565b820191906000526020600020905b8154815290600101906020018083116120e857829003601f168201915b5050505050908060030160009054906101000a900460ff16908060030160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050154908060060154905088565b60086020528060005260406000206000915090505481565b60055481565b60135481565b6121a6612e24565b816007600085815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550806007600085815260200190815260200160002060000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000801b61224a81612d1e565b6000841015801561225d57506103e88411155b61229c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229390615073565b60405180910390fd5b83601181905550826012819055508160138190555050505050565b6122bf612e24565b6001600460008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61230b82610bdc565b61231481612d1e565b61231e8383612d32565b50505050565b600d818154811061233457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612391612e24565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036124035760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016123fa9190614116565b60405180910390fd5b61240c81612f56565b50565b6009602052816000526040600020818154811061242b57600080fd5b90600052602060002001600091509150505481565b60008311801561245557506006805490508311155b612494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248b906149a8565b60405180910390fd5b600b60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612520576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612517906150df565b60405180910390fd5b6000600660018561253191906149f7565b8154811061254257612541614a2b565b5b906000526020600020906007020190506000806000806000808790506103e8601154029550620f42408987028161257c5761257b6150ff565b5b0494506103e8601254860281612595576125946150ff565b5b049350838503925084890391508073ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b81526004016125df9392919061512e565b6020604051808303816000875af11580156125fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612622919061492f565b612661576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612658906151d7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b6040518363ffffffff1660e01b81526004016126be9291906148da565b6020604051808303816000875af11580156126dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612701919061492f565b50600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e2d29848583600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401612783939291906151f7565b6020604051808303816000875af11580156127a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c6919061492f565b50600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e2d29848483601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401612848939291906151f7565b6020604051808303816000875af1158015612867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288b919061492f565b506000600860008960040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000810361290757612904611274565b90505b61290f611274565b81036129e157600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e2d298484848b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401612998939291906151f7565b6020604051808303816000875af11580156129b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129db919061492f565b50612a80565b60006007600083815260200190815260200160002060000160009054906101000a900467ffffffffffffffff16905060006007600084815260200190815260200160002060000160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050612a7c82828c60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168e8961307b565b5050505b8988600601600082825401925050819055508760040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1f004c54eef332ef6912dae8f1775c102da23bec79ccf602eaaa072938e96b678d8d604051612b15929190614fb6565b60405180910390a35050505050505050505050565b60076020528060005260406000206000915090508060000160009054906101000a900467ffffffffffffffff16908060000160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612bf4611547565b15612c2b576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612c398383611795565b612d1357600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612cb0612eab565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050612d18565b600090505b92915050565b612d2f81612d2a612eab565b6136ff565b50565b6000612d3e8383611795565b15612e1957600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612db6612eab565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050612e1e565b600090505b92915050565b612e2c612eab565b73ffffffffffffffffffffffffffffffffffffffff16612e4a6116d6565b73ffffffffffffffffffffffffffffffffffffffff1614612ea957612e6d612eab565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401612ea09190614116565b60405180910390fd5b565b600033905090565b612ebb611547565b612ef1576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612efb612eb3565b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612f3f612eab565b604051612f4c9190614116565b60405180910390a1565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613021612bec565b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613064612eab565b6040516130719190614116565b60405180910390a1565b600085600460008267ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166130f457806040517f4651d51a0000000000000000000000000000000000000000000000000000000081526004016130eb919061522e565b60405180910390fd5b6000600167ffffffffffffffff8111156131115761311061413b565b5b60405190808252806020026020018201604052801561314a57816020015b613137613852565b81526020019060019003908161312f5790505b509050600060405180604001604052808773ffffffffffffffffffffffffffffffffffffffff168152602001868152509050808260008151811061319157613190614a2b565b5b602002602001018190525060006040518060a001604052808a6040516020016131ba9190614116565b6040516020818303038152906040528152602001896040516020016131df9190614116565b6040516020818303038152906040528152602001848152602001600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200161325a6040518060400160405280620dbba0815260200160001515815250613750565b81525090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320487ded8c846040518363ffffffff1660e01b81526004016132be929190615407565b602060405180830381865afa1580156132db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ff91906148ad565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161335c9190614116565b602060405180830381865afa158015613379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061339d91906148ad565b81111561347e57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016133ff9190614116565b602060405180830381865afa15801561341c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344091906148ad565b816040517f8f0f4206000000000000000000000000000000000000000000000000000000008152600401613475929190614fb6565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016134fd9291906148da565b6020604051808303816000875af115801561351c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613540919061492f565b508773ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518363ffffffff1660e01b815260040161359e9291906148da565b6020604051808303816000875af11580156135bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e1919061492f565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396f4e9f98c846040518363ffffffff1660e01b815260040161363f929190615407565b6020604051808303816000875af115801561365e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613682919061544c565b95508a67ffffffffffffffff16867fc15fb748c32ba4eb29c1c311e78533f93b4425eab49ea87c6fe4279ecadca0438c8b8b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040516136e9959493929190615479565b60405180910390a3505050505095945050505050565b6137098282611795565b61374c5780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016137439291906154cc565b60405180910390fd5b5050565b60606397a657c960e01b8260405160240161376b9190615533565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b6040518061010001604052806000815260200160608152602001606081526020016000600181111561380457613803613d3b565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000819050919050565b61389581613882565b82525050565b60006020820190506138b0600083018461388c565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6138ff816138ca565b811461390a57600080fd5b50565b60008135905061391c816138f6565b92915050565b600060208284031215613938576139376138c0565b5b60006139468482850161390d565b91505092915050565b60008115159050919050565b6139648161394f565b82525050565b600060208201905061397f600083018461395b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006139b082613985565b9050919050565b6139c0816139a5565b81146139cb57600080fd5b50565b6000813590506139dd816139b7565b92915050565b6000602082840312156139f9576139f86138c0565b5b6000613a07848285016139ce565b91505092915050565b6000819050919050565b613a2381613a10565b8114613a2e57600080fd5b50565b600081359050613a4081613a1a565b92915050565b600060208284031215613a5c57613a5b6138c0565b5b6000613a6a84828501613a31565b91505092915050565b613a7c81613a10565b82525050565b6000602082019050613a976000830184613a73565b92915050565b613aa681613882565b8114613ab157600080fd5b50565b600081359050613ac381613a9d565b92915050565b60008060408385031215613ae057613adf6138c0565b5b6000613aee85828601613ab4565b9250506020613aff85828601613ab4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613b43578082015181840152602081019050613b28565b60008484015250505050565b6000601f19601f8301169050919050565b6000613b6b82613b09565b613b758185613b14565b9350613b85818560208601613b25565b613b8e81613b4f565b840191505092915050565b60006040820190508181036000830152613bb38185613b60565b9050613bc2602083018461388c565b9392505050565b60008060408385031215613be057613bdf6138c0565b5b6000613bee85828601613a31565b9250506020613bff858286016139ce565b9150509250929050565b600067ffffffffffffffff82169050919050565b613c2681613c09565b8114613c3157600080fd5b50565b600081359050613c4381613c1d565b92915050565b600060208284031215613c5f57613c5e6138c0565b5b6000613c6d84828501613c34565b91505092915050565b60008060408385031215613c8d57613c8c6138c0565b5b6000613c9b858286016139ce565b9250506020613cac858286016139ce565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613ceb81613882565b82525050565b600082825260208201905092915050565b6000613d0d82613b09565b613d178185613cf1565b9350613d27818560208601613b25565b613d3081613b4f565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110613d7b57613d7a613d3b565b5b50565b6000819050613d8c82613d6a565b919050565b6000613d9c82613d7e565b9050919050565b613dac81613d91565b82525050565b613dbb816139a5565b82525050565b600061010083016000830151613dda6000860182613ce2565b5060208301518482036020860152613df28282613d02565b91505060408301518482036040860152613e0c8282613d02565b9150506060830151613e216060860182613da3565b506080830151613e346080860182613db2565b5060a0830151613e4760a0860182613db2565b5060c0830151613e5a60c0860182613ce2565b5060e0830151613e6d60e0860182613ce2565b508091505092915050565b6000613e848383613dc1565b905092915050565b6000602082019050919050565b6000613ea482613cb6565b613eae8185613cc1565b935083602082028501613ec085613cd2565b8060005b85811015613efc5784840389528151613edd8582613e78565b9450613ee883613e8c565b925060208a01995050600181019050613ec4565b50829750879550505050505092915050565b60006020820190508181036000830152613f288184613e99565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613f688383613ce2565b60208301905092915050565b6000602082019050919050565b6000613f8c82613f30565b613f968185613f3b565b9350613fa183613f4c565b8060005b83811015613fd2578151613fb98882613f5c565b9750613fc483613f74565b925050600181019050613fa5565b5085935050505092915050565b60006020820190508181036000830152613ff98184613f81565b905092915050565b600060208284031215614017576140166138c0565b5b600061402584828501613ab4565b91505092915050565b6000610100830160008301516140476000860182613ce2565b506020830151848203602086015261405f8282613d02565b915050604083015184820360408601526140798282613d02565b915050606083015161408e6060860182613da3565b5060808301516140a16080860182613db2565b5060a08301516140b460a0860182613db2565b5060c08301516140c760c0860182613ce2565b5060e08301516140da60e0860182613ce2565b508091505092915050565b600060208201905081810360008301526140ff818461402e565b905092915050565b614110816139a5565b82525050565b600060208201905061412b6000830184614107565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61417382613b4f565b810181811067ffffffffffffffff821117156141925761419161413b565b5b80604052505050565b60006141a56138b6565b90506141b1828261416a565b919050565b600067ffffffffffffffff8211156141d1576141d061413b565b5b6141da82613b4f565b9050602081019050919050565b82818337600083830152505050565b6000614209614204846141b6565b61419b565b90508281526020810184848401111561422557614224614136565b5b6142308482856141e7565b509392505050565b600082601f83011261424d5761424c614131565b5b813561425d8482602086016141f6565b91505092915050565b600067ffffffffffffffff8211156142815761428061413b565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b6000604082840312156142b7576142b6614297565b5b6142c1604061419b565b9050600082013567ffffffffffffffff8111156142e1576142e061429c565b5b6142ed84828501614238565b600083015250602061430184828501613ab4565b60208301525092915050565b600061432061431b84614266565b61419b565b9050808382526020820190506020840283018581111561434357614342614292565b5b835b8181101561438a57803567ffffffffffffffff81111561436857614367614131565b5b80860161437589826142a1565b85526020850194505050602081019050614345565b5050509392505050565b600082601f8301126143a9576143a8614131565b5b81356143b984826020860161430d565b91505092915050565b600080600080600060a086880312156143de576143dd6138c0565b5b600086013567ffffffffffffffff8111156143fc576143fb6138c5565b5b61440888828901614238565b955050602086013567ffffffffffffffff811115614429576144286138c5565b5b61443588828901614238565b9450506040614446888289016139ce565b935050606086013567ffffffffffffffff811115614467576144666138c5565b5b61447388828901614394565b925050608061448488828901613ab4565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060408301600083015184820360008601526144da8282613d02565b91505060208301516144ef6020860182613ce2565b508091505092915050565b600061450683836144bd565b905092915050565b6000602082019050919050565b600061452682614491565b614530818561449c565b935083602082028501614542856144ad565b8060005b8581101561457e578484038952815161455f85826144fa565b945061456a8361450e565b925060208a01995050600181019050614546565b50829750879550505050505092915050565b600060208201905081810360008301526145aa818461451b565b905092915050565b6145bb81613d91565b82525050565b6000610100820190506145d7600083018b61388c565b81810360208301526145e9818a613b60565b905081810360408301526145fd8189613b60565b905061460c60608301886145b2565b6146196080830187614107565b61462660a0830186614107565b61463360c083018561388c565b61464060e083018461388c565b9998505050505050505050565b600080600060608486031215614666576146656138c0565b5b600061467486828701613ab4565b935050602061468586828701613c34565b9250506040614696868287016139ce565b9150509250925092565b6000806000606084860312156146b9576146b86138c0565b5b60006146c786828701613ab4565b93505060206146d886828701613ab4565b92505060406146e986828701613ab4565b9150509250925092565b6000819050919050565b600061471861471361470e84613985565b6146f3565b613985565b9050919050565b600061472a826146fd565b9050919050565b600061473c8261471f565b9050919050565b61474c81614731565b82525050565b60006020820190506147676000830184614743565b92915050565b60008060408385031215614784576147836138c0565b5b6000614792858286016139ce565b92505060206147a385828601613ab4565b9150509250929050565b6000806000606084860312156147c6576147c56138c0565b5b60006147d486828701613ab4565b93505060206147e586828701613ab4565b92505060406147f6868287016139ce565b9150509250925092565b61480981613c09565b82525050565b60006040820190506148246000830185614800565b6148316020830184614107565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061487f57607f821691505b60208210810361489257614891614838565b5b50919050565b6000815190506148a781613a9d565b92915050565b6000602082840312156148c3576148c26138c0565b5b60006148d184828501614898565b91505092915050565b60006040820190506148ef6000830185614107565b6148fc602083018461388c565b9392505050565b61490c8161394f565b811461491757600080fd5b50565b60008151905061492981614903565b92915050565b600060208284031215614945576149446138c0565b5b60006149538482850161491a565b91505092915050565b7f496e76616c69642061677265656d656e74204944000000000000000000000000600082015250565b6000614992601483613b14565b915061499d8261495c565b602082019050919050565b600060208201905081810360008301526149c181614985565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614a0282613882565b9150614a0d83613882565b9250828203905081811115614a2557614a246149c8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f50726f66657373696f6e616c20616464726573732063616e6e6f74206265207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b6000614ab6602383613b14565b9150614ac182614a5a565b604082019050919050565b60006020820190508181036000830152614ae581614aa9565b9050919050565b7f536b696c6c73206d757374206e6f7420626520656d7074790000000000000000600082015250565b6000614b22601883613b14565b9150614b2d82614aec565b602082019050919050565b60006020820190508181036000830152614b5181614b15565b9050919050565b7f5061796d656e7420616d6f756e74206d7573742062652067726561746572207460008201527f68616e207a65726f000000000000000000000000000000000000000000000000602082015250565b6000614bb4602883613b14565b9150614bbf82614b58565b604082019050919050565b60006020820190508181036000830152614be381614ba7565b9050919050565b7f50726f66657373696f6e616c20616464726573732063616e6e6f74206265207460008201527f68652073616d6520617320636f6d70616e790000000000000000000000000000602082015250565b6000614c46603283613b14565b9150614c5182614bea565b604082019050919050565b60006020820190508181036000830152614c7581614c39565b9050919050565b6000614c8782613882565b9150614c9283613882565b9250828201905080821115614caa57614ca96149c8565b5b92915050565b7f546f74616c20736b696c6c206c6576656c2063616e6e6f74206578636565642060008201527f3130300000000000000000000000000000000000000000000000000000000000602082015250565b6000614d0c602383613b14565b9150614d1782614cb0565b604082019050919050565b60006020820190508181036000830152614d3b81614cff565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614da47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614d67565b614dae8683614d67565b95508019841693508086168417925050509392505050565b6000614de1614ddc614dd784613882565b6146f3565b613882565b9050919050565b6000819050919050565b614dfb83614dc6565b614e0f614e0782614de8565b848454614d74565b825550505050565b600090565b614e24614e17565b614e2f818484614df2565b505050565b5b81811015614e5357614e48600082614e1c565b600181019050614e35565b5050565b601f821115614e9857614e6981614d42565b614e7284614d57565b81016020851015614e81578190505b614e95614e8d85614d57565b830182614e34565b50505b505050565b600082821c905092915050565b6000614ebb60001984600802614e9d565b1980831691505092915050565b6000614ed48383614eaa565b9150826002028217905092915050565b614eed82613b09565b67ffffffffffffffff811115614f0657614f0561413b565b5b614f108254614867565b614f1b828285614e57565b600060209050601f831160018114614f4e5760008415614f3c578287015190505b614f468582614ec8565b865550614fae565b601f198416614f5c86614d42565b60005b82811015614f8457848901518255600182019150602085019450602081019050614f5f565b86831015614fa15784890151614f9d601f891682614eaa565b8355505b6001600288020188555050505b505050505050565b6000604082019050614fcb600083018561388c565b614fd8602083018461388c565b9392505050565b6000614fea82613882565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361501c5761501b6149c8565b5b600182019050919050565b7f496e76616c6964206665652070657263656e7461676500000000000000000000600082015250565b600061505d601683613b14565b915061506882615027565b602082019050919050565b6000602082019050818103600083015261508c81615050565b9050919050565b7f496e76616c6964207061796d656e7420746f6b656e0000000000000000000000600082015250565b60006150c9601583613b14565b91506150d482615093565b602082019050919050565b600060208201905081810360008301526150f8816150bc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006060820190506151436000830186614107565b6151506020830185614107565b61515d604083018461388c565b949350505050565b7f55736572206d75737420617070726f76652074686520616d6f756e74206f662060008201527f7468652061677265656d656e7400000000000000000000000000000000000000602082015250565b60006151c1602d83613b14565b91506151cc82615165565b604082019050919050565b600060208201905081810360008301526151f0816151b4565b9050919050565b600060608201905061520c600083018661388c565b6152196020830185614107565b6152266040830184614107565b949350505050565b60006020820190506152436000830184614800565b92915050565b600081519050919050565b600082825260208201905092915050565b600061527082615249565b61527a8185615254565b935061528a818560208601613b25565b61529381613b4f565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6040820160008201516152e06000850182613db2565b5060208201516152f36020850182613ce2565b50505050565b600061530583836152ca565b60408301905092915050565b6000602082019050919050565b60006153298261529e565b61533381856152a9565b935061533e836152ba565b8060005b8381101561536f57815161535688826152f9565b975061536183615311565b925050600181019050615342565b5085935050505092915050565b600060a08301600083015184820360008601526153998282615265565b915050602083015184820360208601526153b38282615265565b915050604083015184820360408601526153cd828261531e565b91505060608301516153e26060860182613db2565b50608083015184820360808601526153fa8282615265565b9150508091505092915050565b600060408201905061541c6000830185614800565b818103602083015261542e818461537c565b90509392505050565b60008151905061544681613a1a565b92915050565b600060208284031215615462576154616138c0565b5b600061547084828501615437565b91505092915050565b600060a08201905061548e6000830188614107565b61549b6020830187614107565b6154a8604083018661388c565b6154b56060830185614107565b6154c2608083018461388c565b9695505050505050565b60006040820190506154e16000830185614107565b6154ee6020830184613a73565b9392505050565b6154fe8161394f565b82525050565b60408201600082015161551a6000850182613ce2565b50602082015161552d60208501826154f5565b50505050565b60006040820190506155486000830184615504565b9291505056fea264697066735822122097ed074fcf87d63587dd3b90870aa584b4f69061fbe192d44ae0c4f9cf2d7d1664736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addAcceptedPaymentToken(address)": {
        "params": {
          "_tokenAddress": "The address of the ERC20 token to be added."
        }
      },
      "createAgreement(string,string,address,(string,uint256)[],uint256)": {
        "params": {
          "_description": "A brief description of the agreement.",
          "_paymentAmount": "The payment amount for the agreement.",
          "_professional": "The address of the professional involved in the agreement.",
          "_skills": "An array of skills required for the agreement.",
          "_title": "The title of the agreement."
        }
      },
      "getAgreementById(uint256)": {
        "params": {
          "_id": "The ID of the agreement."
        },
        "returns": {
          "_0": "Agreement The agreement associated with the given ID."
        }
      },
      "getAgreementCount()": {
        "returns": {
          "_0": "uint256 The total number of agreements."
        }
      },
      "getAllAgreements()": {
        "returns": {
          "_0": "Agreement[] An array of all agreements."
        }
      },
      "getContractorAgreementIds(address)": {
        "params": {
          "_contractor": "The address of the contractor."
        },
        "returns": {
          "_0": "uint256[] An array of agreement IDs."
        }
      },
      "getProfessionalAgreementIds(address)": {
        "params": {
          "_professional": "The address of the professional."
        },
        "returns": {
          "_0": "uint256[] An array of agreement IDs."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSkillsByAgreementId(uint256)": {
        "params": {
          "_agreementId": "The ID of the agreement."
        },
        "returns": {
          "_0": "Skill[] An array of skills associated with the agreement."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "makePayment(uint256,uint256,address)": {
        "params": {
          "_agreementId": "The ID of the agreement for which the payment is being made.",
          "_amountToPay": "The amount of the payment.",
          "_paymentAddress": "The address of the token in which payment is made."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setFees(uint256,uint256,uint256)": {
        "params": {
          "_communityDAOFee": "The portion of the fee allocated to the Community DAO.",
          "_feePercentage": "The percentage of the transaction amount to be taken as a fee.",
          "_kyodoTreasuryFee": "The portion of the fee allocated to the Kyodo Treasury."
        }
      },
      "setStableVaultAddress(address)": {
        "params": {
          "_StableVaultAddress": "The address of the StableVault contract."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAcceptedPaymentToken(address)": {
        "notice": "Adds an ERC20 token to the list of accepted payment tokens."
      },
      "createAgreement(string,string,address,(string,uint256)[],uint256)": {
        "notice": "Creates a new agreement between a company and a professional."
      },
      "getAgreementById(uint256)": {
        "notice": "Retrieves an agreement by its ID."
      },
      "getAgreementCount()": {
        "notice": "Returns the total number of agreements created."
      },
      "getAllAgreements()": {
        "notice": "Returns all agreements."
      },
      "getContractorAgreementIds(address)": {
        "notice": "Returns a list of agreement IDs associated with a contractor."
      },
      "getProfessionalAgreementIds(address)": {
        "notice": "Returns a list of agreement IDs associated with a professional."
      },
      "getSkillsByAgreementId(uint256)": {
        "notice": "Retrieves the skills associated with a specific agreement ID."
      },
      "makePayment(uint256,uint256,address)": {
        "notice": "Makes a payment for a specific agreement."
      },
      "setFees(uint256,uint256,uint256)": {
        "notice": "Sets the fee structure for the agreement transactions."
      },
      "setStableVaultAddress(address)": {
        "notice": "Sets the address of the StableVault contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 135,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)130_storage)"
      },
      {
        "astId": 748,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 496,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "_owner",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1794,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRouterClient)51"
      },
      {
        "astId": 1797,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "linkToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)717"
      },
      {
        "astId": 1799,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "chainSelector",
        "offset": 20,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 1803,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "whitelistedChains",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 1032,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "nextAgreementId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1036,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "agreements",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Agreement)2123_storage)dyn_storage"
      },
      {
        "astId": 1041,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "crossChainCCIPConfigs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(CrossChainCCIP)2128_storage)"
      },
      {
        "astId": 1045,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "userPreferredChain",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1050,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "contractorAgreements",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1055,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "professionalAgreements",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1059,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "acceptedPaymentTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1065,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "agreementSkills",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_array(t_struct(Skill)2105_storage)dyn_storage)"
      },
      {
        "astId": 1068,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1071,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "StableVault",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IStableVault)2354"
      },
      {
        "astId": 1073,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "kyodoTreasury",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 1075,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "communityDAO",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 1077,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "feePercentage",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 1079,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "kyodoTreasuryFee",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 1081,
        "contract": "contracts/AgreementContract.sol:AgreementContract",
        "label": "communityDAOFee",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Agreement)2123_storage)dyn_storage": {
        "base": "t_struct(Agreement)2123_storage",
        "encoding": "dynamic_array",
        "label": "struct IAgreementContract.Agreement[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Skill)2105_storage)dyn_storage": {
        "base": "t_struct(Skill)2105_storage",
        "encoding": "dynamic_array",
        "label": "struct IAgreementContract.Skill[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)717": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRouterClient)51": {
        "encoding": "inplace",
        "label": "contract IRouterClient",
        "numberOfBytes": "20"
      },
      "t_contract(IStableVault)2354": {
        "encoding": "inplace",
        "label": "contract IStableVault",
        "numberOfBytes": "20"
      },
      "t_enum(AgreementStatus)2131": {
        "encoding": "inplace",
        "label": "enum IAgreementContract.AgreementStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)130_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)130_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(Skill)2105_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IAgreementContract.Skill[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Skill)2105_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(CrossChainCCIP)2128_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IAgreementContract.CrossChainCCIP)",
        "numberOfBytes": "32",
        "value": "t_struct(CrossChainCCIP)2128_storage"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Agreement)2123_storage": {
        "encoding": "inplace",
        "label": "struct IAgreementContract.Agreement",
        "members": [
          {
            "astId": 2107,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2109,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2111,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2114,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(AgreementStatus)2131"
          },
          {
            "astId": 2116,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "company",
            "offset": 1,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2118,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "professional",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2120,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "paymentAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2122,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "totalPaid",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(CrossChainCCIP)2128_storage": {
        "encoding": "inplace",
        "label": "struct IAgreementContract.CrossChainCCIP",
        "members": [
          {
            "astId": 2125,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "chainSelector",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2127,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "vaultAddress",
            "offset": 8,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)130_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 127,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 129,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Skill)2105_storage": {
        "encoding": "inplace",
        "label": "struct IAgreementContract.Skill",
        "members": [
          {
            "astId": 2102,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2104,
            "contract": "contracts/AgreementContract.sol:AgreementContract",
            "label": "level",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}